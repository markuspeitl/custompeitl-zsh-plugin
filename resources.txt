https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org
https://unix.stackexchange.com/questions/33255/how-to-define-and-load-your-own-shell-function-in-zsh



"""local -a _1st_arguments
_1st_arguments=(
  'help:show help'
  '--version:print out the latest released version of nvm'
  'install:download and install a version in <node|iojs|node version number>'
  'install-latest-npm:download and install the latest npm version'
  'uninstall:uninstall a version'
  'use:modify PATH to use <version>. Uses .nvmrc if available'
  'exec:run <command> on <version>. Uses .nvmrc if available'
  'run:run `node` on <version> with <args> as arguments. Uses .nvmrc if available'
  'current:list installed versions'
  'ls:list installed versions or versions matching a given description'
  'version:resolve the given description to a single local version'
  'version-remote:resolve the given description to a single remote version'
  'ls-remote:list remote versions available for install'
  'deactivate:undo effects of `nvm` on current shell'
  'alias:show or set aliases'
  'unalias:deletes an alias'
  'reinstall-packages:reinstall global `npm` packages contained in <version> to current version'
  'unload:unload `nvm` from shell'
  'which:display path to installed node version. Uses .nvmrc if available'
)
"""

#compdef foobar
#function cn(){
#	print("test: $1")
#}
#function _cn {
    #compadd -- ${(f)"$(_call_program nmcli nmcli -t -f ssid device wifi list)"}   
#}

compdef `_hellos` hellos

compadd -- ${(f)"$(_call_program nmcli nmcli -t -f ssid device wifi list)"}   


local -a subcmds
subcmds=('c:description for c command' 'd:description for d command')
_describe 'command' subcmds

_arguments=('test')

local -a _1st_arguments
_1st_arguments=(
  'help:show help'
  '--version:print out the latest released version of nvm'
  'install:download and install a version in <node|iojs|node version number>'
  'install-latest-npm:download and install the latest npm version'
  'uninstall:uninstall a version'
  'use:modify PATH to use <version>. Uses .nvmrc if available'
  'exec:run <command> on <version>. Uses .nvmrc if available'
  'run:run `node` on <version> with <args> as arguments. Uses .nvmrc if available'
  'current:list installed versions'
  'ls:list installed versions or versions matching a given description'
  'version:resolve the given description to a single local version'
  'version-remote:resolve the given description to a single remote version'
  'ls-remote:list remote versions available for install'
  'deactivate:undo effects of `nvm` on current shell'
  'alias:show or set aliases'
  'unalias:deletes an alias'
  'reinstall-packages:reinstall global `npm` packages contained in <version> to current version'
  'unload:unload `nvm` from shell'
  'which:display path to installed node version. Uses .nvmrc if available'
)

#compadd -- ${(f)"$(_call_program nmcli nmcli -t -f ssid device wifi list)"}
#autoload


"""local -a _1st_arguments
_1st_arguments=(
  'help:show help'
  '--version:print out the latest released version of nvm'
  'install:download and install a version in <node|iojs|node version number>'
  'install-latest-npm:download and install the latest npm version'
  'uninstall:uninstall a version'
  'use:modify PATH to use <version>. Uses .nvmrc if available'
  'exec:run <command> on <version>. Uses .nvmrc if available'
  'run:run `node` on <version> with <args> as arguments. Uses .nvmrc if available'
  'current:list installed versions'
  'ls:list installed versions or versions matching a given description'
  'version:resolve the given description to a single local version'
  'version-remote:resolve the given description to a single remote version'
  'ls-remote:list remote versions available for install'
  'deactivate:undo effects of `nvm` on current shell'
  'alias:show or set aliases'
  'unalias:deletes an alias'
  'reinstall-packages:reinstall global `npm` packages contained in <version> to current version'
  'unload:unload `nvm` from shell'
  'which:display path to installed node version. Uses .nvmrc if available'
)

_arguments -C '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands \"nvm subcommand\" _1st_arguments
  return
fi"""



#_arguments \
#  '(- *)'{-h,--help}'[Print help message]' \
#  '(- *)'{-v,--version}'[Print module version information]' \
#&& return 0

#compdef cn
#function cn(){
#	print("test: $1")
#}
#function _cn {
    #compadd -- ${(f)"$(_call_program nmcli nmcli -t -f ssid device wifi list)"}   
#}
#compdef `_cn` cn

https://stackoverflow.com/questions/72844473/complete-a-command-with-arguments-like-another-command-with-other-arguments




#compdef wake
#autoload

_arguments "1:device to wake:_files -W '$HOME/.wakeonlan'" && return 0


https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org#writing-your-own-completion-functions
https://blog.mads-hartmann.com/2017/08/06/writing-zsh-completion-scripts.html

https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System